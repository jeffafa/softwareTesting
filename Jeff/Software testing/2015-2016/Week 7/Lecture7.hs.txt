  module Lecture7
  
  where 
  
  import Data.List
  import Test.QuickCheck
  import Test.MuCheck

  data Btree a = Leaf | B a (Btree a) (Btree a) deriving (Eq,Show)

  example1 = B "Goedel, Kurt" Leaf
             (B "Hoare, Tony" Leaf (B "Turing, Alan" Leaf Leaf))
             
  example2 = B "Hoare, Tony" (B "Goedel, Kurt" Leaf Leaf)
                             (B "Turing, Alan" Leaf Leaf) 

  weight :: Btree a -> Int
  weight Leaf = 0
  weight (B _ t1 t2) = 1 + weight t1 + weight t2

  leafCnt :: Btree a -> Int
  leafCnt Leaf = 1
  leafCnt (B _ t1 t2) = leafCnt t1 +leafCnt t2

  prop_tree t = weight t + 1 == leafCnt t
          where types = t :: Btree Int

  instance Arbitrary a => Arbitrary (Btree a) where
      arbitrary = sized gtree
 
  gtree 0 = return Leaf
  gtree n = do
             x <- arbitrary 
             t1 <- subtree
             t2 <- subtree
             return (B x t1 t2)
        where subtree = gtree (n `div` 2)

  weight' :: Btree a -> Int
  weight' = foldT (\ _ n m -> 1+n+m) 0
 
  leafCnt' :: Btree a -> Int
  leafCnt' = foldT (\ _ n m -> n+m) 1       

  foldT :: (a -> b -> b -> b) -> b -> Btree a -> b
  foldT f z Leaf = z
  foldT f z (B x t1 t2) = f x (foldT f z t1) (foldT f z t2)

  mapT :: (a -> b) -> Btree a -> Btree b
  mapT f = foldT (\ x t1 t2 -> B (f x) t1 t2) Leaf

  w :: Btree a -> Btree Int
  w = foldT (\ _ t1 t2 -> B (1 + weight t1 + weight t2) t1 t2) Leaf

  balanced :: Btree a -> Bool
  balanced Leaf = True
  balanced (B _ t1 t2) =
      balanced t1 && balanced t2 && weight t1 == weight t2               

  nbalanced :: Btree a -> Bool
  nbalanced Leaf = True
  nbalanced (B _ t1 t2) =
      nbalanced t1 && nbalanced t2
      && diff (weight t1) (weight t2) <= 1
    where diff n m = abs (n - m)

  list2btree :: [a] -> Btree a
  list2btree [] = Leaf
  list2btree xs = let
     n  = length xs 
     firstHalf  = take (n `div` 2) xs
     secondHalf = drop (n `div` 2) xs
     (x,secondHalf') = (head secondHalf,tail secondHalf)
   in
     B x (list2btree firstHalf) (list2btree secondHalf')

  prop_nbalance xs = nbalanced $ list2btree xs
     where types = xs :: [Int]

  inOrder :: Btree a -> [a]
  inOrder Leaf = []
  inOrder (B x t1 t2) = inOrder t1 ++ [x] ++ inOrder t2

  orderedT :: Ord a => Btree a -> Bool
  orderedT t = ordered (inOrder t)

  ordered :: Ord a => [a] -> Bool
  ordered xs = all (uncurry (<=)) (zip xs (tail xs))

  prop_orderT xs = ordered xs ==> orderedT $ list2btree xs
          where types = xs :: [Int]

  prop_orderT' (Ordered xs) = orderedT $ list2btree xs
          where types = xs :: [Int]

  bSearch :: Ord key => key -> Btree (key,value) -> Maybe value
  bSearch _ Leaf = Nothing
  bSearch x (B (k,v) left right) = if x == k then Just v
                                   else if x < k then bSearch x left
                                   else bSearch x right

  prop_bsearch1 xs = let
     types = xs :: [Int]
     keyValues = zip (sort xs) xs
     tree = list2btree keyValues
   in
     all (\x -> bSearch x tree /= Nothing) xs 

  prop_bsearch2 xs ys = let
     types = xs++ys :: [Int]
     zs = nub ys \\ xs
     keyValues = zip (sort xs) xs
     tree = list2btree keyValues
   in
     all (\x -> bSearch x tree == Nothing) zs 

