module LabExamAnswers

where
import Data.List

data Btree a = Leaf | B a (Btree a) (Btree a) deriving (Eq,Show)

mapT :: (a -> b) -> Btree a -> Btree b
mapT f Leaf = Leaf 
mapT f (B x left right) = B (f x) (mapT f left) (mapT f right)

inOrder :: Btree a -> [a]
inOrder Leaf = []
inOrder (B x left right) = inOrder left ++ [x] ++ inOrder right 

inOrderRev :: Btree a -> [a]
inOrderRev Leaf = []
inOrderRev (B x left right) = inOrderRev right ++ [x] ++ inOrderRev left

treeProperty :: Eq a => Btree a -> Bool
treeProperty t = inOrder t == reverse (inOrderRev t) 

makeT :: Ord a => [a] -> Btree a
makeT = foldr insertT Leaf

insertT :: Ord a => a -> Btree a -> Btree a
insertT x Leaf = B x Leaf Leaf
insertT x (B y left right) 
  | x < y     = B y (insertT x left) right
  | otherwise = B y left (insertT x right) 

srt :: Ord a => [a] -> [a]
srt = inOrder . makeT

type Dict = Btree (String,String) 

lemma, info :: (String,String) -> String
lemma (x,_) = x
info  (_,y) = y 

lookUp ::  String -> Dict -> [String]
lookUp x Leaf = []
lookUp x (B y left right) = if x == lemma y then [info y]
    else if x < lemma y then lookUp x left else lookUp x right 

invar :: (a -> Bool) -> (a -> a) -> a -> a
invar p = assert (\ x y -> not (p x) || p y) 

assert :: (a -> b -> Bool) -> (a -> b) -> a -> b 
assert p f x = let x' = f x in 
   if p x x' then x' else error "assert"

insertLemma :: (String,String) -> Dict -> Dict
insertLemma (u,v) Leaf = B (u,v) Leaf Leaf
insertLemma (u,v) (B (w,x) left right) = 
  if u == w then error "lemma already present"
  else if u < w then 
    B (w,x) (insertLemma (u,v) left) right
  else 
    B (w,x) left (insertLemma (u,v) right)

insertLemma' p = invar ordered (insertLemma p)

ordered1 :: Dict -> Bool
ordered1 Leaf = True
ordered1 (B _ Leaf Leaf) = True
ordered1 (B x Leaf (B x1 l r)) = 
  lemma x < lemma x1 && ordered1  (B x1 l r)
ordered1 (B x (B x1 l r) Leaf) = 
  ordered1 (B x1 l r) && lemma x1 < lemma x
ordered1 (B x (B x1 l1 r1) (B x2 l2 r2)) = 
  lemma x1 < lemma x && lemma x < lemma x2 && 
  ordered1 (B x1 l1 r1) && ordered1 (B x2 l2 r2)

ordered2 :: Dict -> Bool
ordered2 dict = ordered' [] [] dict where 
  ordered' :: [String] -> [String] -> Dict -> Bool
  ordered' _ _ Leaf = True 
  ordered' xs ys (B u left right) = let z = lemma u in 
      (xs == [] || z > head xs) &&
      (ys == [] || z < head ys) &&
       ordered' xs [z] left && ordered' [z] ys right

ordered :: Dict -> Bool
ordered tree = ordered' (inOrder tree) where 
  ordered' [] = True
  ordered' [x] = True
  ordered' (x:y:zs) = lemma x < lemma y && ordered' (y:zs) 

sharpTest :: Dict -> Bool
sharpTest = \ d -> ordered1 d == ordered d

curryTest :: Dict -> Bool
curryTest = \ d -> ordered2 d == ordered d

example = B ("c","..") 
            (B ("b","..") (B ("a","..") Leaf Leaf) 
                          (B ("d","..") Leaf Leaf)) 
            Leaf

