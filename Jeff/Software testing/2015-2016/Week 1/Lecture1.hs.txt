  module Lecture1 where
  import Data.List

  sentence = "Sentences can go " ++ onAndOn
  onAndOn  = "on and " ++ onAndOn

  sentences = "Sentences can go on":
                 map (++ " and on") sentences

  threefold :: Integer -> Bool
  threefold n = rem n 3 == 0

  threefolds = filter threefold [0..]                     

  nats = [0..]
 
  query1 = all (\ n -> any (\ m -> n < m) nats) nats
 
  query2 = any (\ n -> all (\ m -> n <= m) nats) nats

  myall p = foldr (\ x b -> p x && b) True
  myany p = foldr (\ x b -> p x || b) False

  divide :: Integer -> Integer -> Bool
  divide n m = rem m n == 0

  isPrime :: Integer -> Bool
  isPrime n = n > 1 && all (\ d -> not (divide d n)) [2..n-1]

  isPrime' :: Integer -> Bool
  isPrime' n = all (\ x -> rem n x /= 0) xs
    where xs = takeWhile (\ y -> y^2 <= n) [2..]

  prime :: Integer -> Bool
  prime n = all (\ x -> rem n x /= 0) xs
    where xs = takeWhile (\ y -> y^2 <= n) primes

  primes :: [Integer]
  primes = 2 : filter prime [3..]

  sieve :: [Integer] -> [Integer]
  sieve (n:ns) = n : sieve (filter (\m -> rem m n /= 0) ns)

  eprimes = sieve [2..]

  converse :: Integer -> Integer
  converse = read . reverse . show
 
  solution = takeWhile (< 10000) (filter (prime.converse) primes)

  dif2 :: [Integer] -> [(Integer,Integer)]
  dif2 (p:q:rs) = if p + 2 == q then (p,q) : dif2 (q:rs)
                  else dif2 (q:rs)
 
  primePairs = dif2 primes

  dif6 :: [Integer] -> [(Integer,Integer,Integer)]
  dif6 (p:q:r:ss) = if p + 6 == r then (p,q,r) : dif6 (q:r:ss)
                    else dif6 (q:r:ss)
 
  primeTriples = dif6 primes
 
  sol = take 100 primeTriples

  nextPrime :: Integer -> Integer
  nextPrime n = if prime n then n else nextPrime (n+1)

  mersenne :: [Integer]
  mersenne = [ p | p <- primes, prime (2^p - 1) ]

  counterexamples :: [([Integer],Integer)]
  counterexamples = [ (ps,product ps + 1) | 
                           ps <- [ take n primes | n <- [2..] ],
                           not $ prime (product ps + 1) ]

  pythTriples :: [(Integer,Integer,Integer)]
  pythTriples = filter (\ (x,y,z) -> x^2 + y^2 == z^2)  
     [ (x,y,z) | z <- [1..], x <- [1..z], y <- [1..z], x < y  ]

